# -*- coding: utf-8 -*-
"""Parte 1: Teoría

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EtDycHeE6vukgxLAIRVr_YQw_T4LKhRd

¿Cuáles son las diferencias entre concurrencia y paralelismo?.

- Las principales diferencias son por ejemplo que la concurrencia se refiere a la capacidad de un sistema para manejar múltiples tareas de manera que parecen ejecutarse simultáneamente. Por otro lado, el paralelismo implica la ejecución real y simultánea de múltiples tareas utilizando varios procesadores o núcleos, donde cada tarea se ejecuta en un procesador diferente al mismo tiempo. Mientras la concurrencia mejora la eficiencia y capacidad de respuesta del sistema al permitir que múltiples tareas progresen, el paralelismo busca reducir el tiempo total de procesamiento ejecutando tareas en paralelo en hardware adecuado. Básicamente, la concurrencia gestiona múltiples tareas en un solo procesador para optimizar el uso de recursos, mientras que el paralelismo utiliza múltiples procesadores para ejecutar tareas simultáneamente.

¿En qué escenario es preferible usar concurrencia sobre paralelismo y viceversa?

- La concurrencia es preferible en escenarios donde se manejan tareas limitadas por operaciones de entrada y salida, como servidores web y aplicaciones de red, ya que permite gestionar múltiples operaciones simultáneamente sin esperar a que cada una se complete, mejorando la capacidad de respuesta del sistema. Por otro lado, el paralelismo es más adecuado para tareas limitadas por CPU, como cálculos científicos, procesamiento de imágenes y simulaciones, donde dividir la carga de trabajo entre múltiples núcleos de CPU puede reducir significativamente el tiempo total de procesamiento. También se prefiere en el procesamiento en lotes y en tareas independientes que pueden ejecutarse simultáneamente sin dependencia mutua, maximizando así el uso de recursos de hardware disponibles.

Presenta un repaso sobre los módulos multiprocessing, asyncio, y concurrent.futures.

- Los módulos `multiprocessing`, `asyncio` y `concurrent.futures` son herramientas poderosas en Python para trabajar con concurrencia y paralelismo. `multiprocessing` facilita la creación y gestión de procesos independientes, permitiendo ejecutar tareas en paralelo en múltiples núcleos de CPU. Por otro lado, `asyncio` es una biblioteca asincrónica que utiliza corutinas para lograr concurrencia eficiente, ideal para aplicaciones de red y E/S intensivas. Finalmente, `concurrent.futures` proporciona una interfaz simple para la programación concurrente y paralela mediante la ejecución de tareas en segundo plano y la gestión de hilos y procesos de forma transparente, lo que facilita la escritura de código concurrente sin la complejidad de la gestión manual de hilos y procesos. Cada uno de estos módulos tiene sus propias ventajas y casos de uso específicos, lo que permite a los desarrolladores elegir la mejor herramienta según los requisitos y características de sus aplicaciones.

Explica cómo Docker puede ser usado para simular entornos distribuidos y la importancia de la contenerización en proyectos paralelos y distribuidos

- Docker es una herramienta clave para simular entornos distribuidos al permitir la creación y gestión de contenedores ligeros y portátiles que encapsulan aplicaciones y sus dependencias. Esto facilita la replicación precisa de entornos de desarrollo, pruebas y producción en diferentes máquinas, lo que es fundamental para proyectos paralelos y distribuidos. La contenerización con Docker ofrece una solución consistente y eficiente para desplegar y escalar aplicaciones en entornos distribuidos, lo que agiliza el desarrollo, garantiza la consistencia del entorno y simplifica la gestión de la infraestructura, lo que resulta en una mayor eficiencia y confiabilidad del sistema distribuido en su conjunto.
"""